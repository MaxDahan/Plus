import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.KeyStroke;

public class MainScreen extends javax.swing.JFrame implements WritableGUI {
	public String[] board = new String[9];
	public String XoO = "";
	public boolean turn = true;
	public TTBoard TTBoard;
	private JCheckBoxMenuItem cbMenuItem;
	private JRadioButtonMenuItem rbMenuItem;
	private boolean che = false;

	public void closeMe() {
		dispose();
	}
	
	/**
	 * Creates new form MainScreen
	 */
	public MainScreen() {
		myName = new Profile("MAXIME", "Your IPv4", "1111", true);
		yourName = new Profile("KAEDEN", "Your Port <------- Friends IPv4 -------> Friends Port", "2222", false);
		initComponents();
	}

	private void updateFields() {
		ipTextField.setText(yourName.getIP());
		targetPort.setText(yourName.getPort());
		receivePort.setText(myName.getPort());
		this.setTitle(myName.getName() + " | Chat with " + yourName.getName());
	}

	public MainScreen(Profile me, Profile you) {
		myName = me;
		yourName = you;
		initComponents();
		String lcMe = "" + me.getName().charAt(0) + me.getName().toLowerCase().substring(1);
		String lcU = "" + you.getName().charAt(0) + you.getName().toLowerCase().substring(1);
		this.setTitle(lcMe + " | Chat with " + lcU);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		// getNames();
		ipTextField = new javax.swing.JTextField();
		targetPort = new javax.swing.JTextField();
		jScrollPane1 = new javax.swing.JScrollPane();
		chat = new javax.swing.JTextArea();
		message = new javax.swing.JTextField();
		sendButton = new javax.swing.JButton();
		listenButton = new javax.swing.JButton();
		receivePort = new javax.swing.JTextField();
		mb = new JMenuBar();
		chatLoggerString = "";

		directory = new ArrayList<Profile>();

		this.setAlwaysOnTop(true);
		this.setResizable(false);
		this.setIconImage(new ImageIcon(System.getProperty("user.dir") + "/data/ChatApp/Icon.png").getImage());

		File directoryFile = new File(System.getProperty("user.dir") + "/data/ChatApp/directory.txt");
		Scanner directoryScan;
		try {
			directoryScan = new Scanner(directoryFile);
			boolean me = true;
			while (directoryScan.hasNextLine()) {
				String line = directoryScan.nextLine();
				Scanner lineScan = new Scanner(line);
				directory.add(new Profile(lineScan.next(), lineScan.next(), lineScan.next(), me));
				me = false;
				lineScan.close();
			}
		} catch (FileNotFoundException e3) {
			System.err.println("Error reading directory");
		}

		menu = new JMenu("File");
		menu.setMnemonic(KeyEvent.VK_A);
		menu.getAccessibleContext().setAccessibleDescription("The only menu in this program that has menu items");
		mb.add(menu);

		// a group of JMenuItems
		menuItem = new JMenuItem("Save", KeyEvent.VK_S);
		menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.CTRL_MASK));
		menuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				JFileChooser fileChooser = new JFileChooser();
				if (fileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
					File file = fileChooser.getSelectedFile();
					PrintStream p;
					try {
						p = new PrintStream(file);
						Scanner scan = new Scanner(chatLoggerString);
						while (scan.hasNextLine()) {
							p.println(scan.nextLine());
						}
						scan.close();
					} catch (FileNotFoundException e) {
						System.err.println("Error printing to file");
					}
				}
			}
		});
		menuItem.getAccessibleContext().setAccessibleDescription("This doesn't really do anything");
		menu.add(menuItem);

		menuItem = new JMenuItem("Load ChatLog", new ImageIcon("images/middle.gif"));
		menuItem.setMnemonic(KeyEvent.VK_L);
		menuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				JFileChooser fileChooser = new JFileChooser();
				if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
					File file = fileChooser.getSelectedFile();
					Scanner scan;
					try {
						scan = new Scanner(file);
						while (scan.hasNextLine()) {
							chat.append(scan.nextLine() + "\n");
						}
					} catch (FileNotFoundException e) {
						System.err.println("Error reading from file");
					}
				}
			}
		});
		menu.add(menuItem);

		menuItem = new JMenuItem(new ImageIcon("images/middle.gif"));
		menuItem.setMnemonic(KeyEvent.VK_D);
		menu.add(menuItem);

		// a group of radio button menu items
		menu.addSeparator();
		menuItem = new JMenuItem("Options", new ImageIcon("images/middle.gif"));
		menuItem.setMnemonic(KeyEvent.VK_P);
		menuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				System.out.println("OPTIONS CLICKED");
			}
		});
		menu.add(menuItem);
		menu.addSeparator();
		cbMenuItem = new JCheckBoxMenuItem("Always on top");
		cbMenuItem.setMnemonic(KeyEvent.VK_T);
		cbMenuItem.setSelected(true);
		cbMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				if(che) { setAlwaysOnTop(true); che = false;}
				else { setAlwaysOnTop(false); che = true;}
			}
		});
		menu.add(cbMenuItem);

		cbMenuItem = new JCheckBoxMenuItem("Another one");
		cbMenuItem.setMnemonic(KeyEvent.VK_H);
		menu.add(cbMenuItem);

		// a submenu
		menu.addSeparator();
		submenu = new JMenu("Contacts");
		submenu.setMnemonic(KeyEvent.VK_C);
		for (Profile p : directory) {
			if (p.isMe())
				myName = p;
			menuItem = new JMenuItem(p.getName());
			menuItem.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					yourName = p;
					updateFields();
				}
			});
			submenu.add(menuItem);
		}
		menuItem = new JMenuItem("Add new...");
		// menuItem.addAction
		submenu.add(menuItem);

		menu.add(submenu);
		// Build second menu in the menu bar.
		menu = new JMenu("Options");
		menu.setMnemonic(KeyEvent.VK_N);
		menu.getAccessibleContext().setAccessibleDescription("This menu does nothing");
		mb.add(menu);

		this.setJMenuBar(mb);

		// IconImageUtilities.setIconImage(this);

		Scanner logLoad;
		String log = "";
		try { // LOAD PREVIOUS CHAT FROM LOG
			logLoad = new Scanner(new File(System.getProperty("user.dir") + "/data/ChatApp/chatLog.txt"));
			while (logLoad.hasNextLine()) {
				log += logLoad.nextLine() + "\n";
			}
			logLoad.close();
		} catch (FileNotFoundException e2) {
			System.err.println("No log loaded");
		}
		try {
			doc = new PrintStream(new File(System.getProperty("user.dir") + "/data/ChatApp/chatLog.txt"));
		} catch (FileNotFoundException e1) {
			doc = null;
			System.err.println("LOG NOT LOADED");
		}
		Scanner scan = new Scanner(log);
		while (scan.hasNextLine()) {
			this.write(scan.nextLine());
		}
		scan.close();
		// swapButton = new javax.swing.JButton();

		chat.setEditable(false); // EDIT: WAS EDITABLE BEFORE

		message.setEditable(false);
		sendButton.setEnabled(false);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		// System.out.println(yourName.getPort());
		targetPort.setText("" + yourName.getPort());

		chat.setColumns(20);
		chat.setRows(5);
		jScrollPane1.setViewportView(chat);

		/*
		 * swapButton.setText("Swap"); swapButton.addActionListener(new
		 * java.awt.event.ActionListener() { public void
		 * actionPerformed(java.awt.event.ActionEvent evt) {
		 * receivePort.setText("8877"); String temp = targetPort.getText();
		 * targetPort.setText(receivePort.getText()); receivePort.setText(temp); } });
		 */

		sendButton.setText("Send");
		sendButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				sendButtonActionPerformed(evt);
				message.setText("");
			}
		});

		message.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_ENTER) {
					sendMessage(message.getText());
					message.setText("");
				}
			}

		});

		listenButton.setLabel("Start Chat");
		ipTextField.setText(yourName.getIP());
		listenButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				listenButtonActionPerformed(evt, yourName.getName());
				listenButton.setEnabled(false);
				ipTextField.setEnabled(false);
				receivePort.setEnabled(false);
				targetPort.setEnabled(false);
				message.setEditable(true);
				sendButton.setEnabled(true);
			}
		});
		receivePort.setText(myName.getPort());

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addContainerGap()
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
								.addComponent(listenButton)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(receivePort, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 370,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								// .addComponent(swapButton)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(targetPort, javax.swing.GroupLayout.PREFERRED_SIZE, 45,
										javax.swing.GroupLayout.PREFERRED_SIZE))

						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
								layout.createSequentialGroup().addComponent(message)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(sendButton)))
				.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addContainerGap()
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(targetPort, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(listenButton).addComponent(receivePort, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
				.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233,
						javax.swing.GroupLayout.PREFERRED_SIZE)
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(sendButton))
				.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	MessageListener listener;

	public void nextTurn() {
		JButton nextT = new JButton("Next Turn");
		nextT.setFont(new Font("Arial", Font.BOLD, 25));
		nextT.setBounds(50, 250, 150, 50);
		TTBoard.TTP.add(nextT);
		nextT.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String line = listener.gLine();
				if (line.equals("Good job player O you won!") || line.equals("Good job player X you won!")) {
					TTBoard.TTF.dispose();
				}
				if (line.equals("X1")) {
					board[0] = "X";
					TTBoard.sB1("X");
				}
				if (line.equals("O1")) {
					board[0] = "O";
					TTBoard.sB1("O");
				}

				if (line.equals("X2")) {
					board[1] = "X";
					TTBoard.sB2("X");
				}
				if (line.equals("O2")) {
					board[1] = "O";
					TTBoard.sB2("O");
				}

				if (line.equals("X3")) {
					board[2] = "X";
					TTBoard.sB3("X");
				}
				if (line.equals("O3")) {
					board[2] = "O";
					TTBoard.sB3("O");
				}

				if (line.equals("X4")) {
					board[3] = "X";
					TTBoard.sB4("X");
				}
				if (line.equals("O4")) {
					board[3] = "O";
					TTBoard.sB4("O");
				}

				if (line.equals("X5")) {
					board[4] = "X";
					TTBoard.sB5("X");
				}
				if (line.equals("O5")) {
					board[4] = "O";
					TTBoard.sB5("O");
				}

				if (line.equals("X6")) {
					board[5] = "X";
					TTBoard.sB6("X");
				}
				if (line.equals("O6")) {
					board[5] = "O";
					TTBoard.sB6("O");
				}

				if (line.equals("X7")) {
					board[6] = "X";
					TTBoard.sB7("X");
				}
				if (line.equals("O7")) {
					board[6] = "O";
					TTBoard.sB7("O");
				}

				if (line.equals("X8")) {
					board[7] = "X";
					TTBoard.sB8("X");
				}
				if (line.equals("O8")) {
					board[7] = "O";
					TTBoard.sB8("O");
				}

				if (line.equals("X9")) {
					board[8] = "X";
					TTBoard.sB9("X");
				}
				if (line.equals("O9")) {
					board[8] = "O";
					TTBoard.sB9("O");
				}

				String check = check();
				if (check.equals("XXX")) {
					TTBoard.TTF.dispose();
					send("Good job player X you won!");
					write("Good job player X you won!");
				} else if (check.equals("OOO")) {
					TTBoard.TTF.dispose();
					send("Good job player O you won!");
					write("Good job player O you won!");
				}
				boolean full = true;
				for (int i = 0; i < board.length; i++) {
					if (board[i].equals(null) || board[i].equals("")) {
						full = false;
					}
				}
				if (full) {
					TTBoard.TTF.dispose();
					write("Its a tie!");
				}
			}
		});
	}

	public String check() {
		String word = "";
		word = board[0] + board[1] + board[2]; // right, from first row starting at the left
		if (word.equals("XXX") || word.equals("OOO")) {
			return word;
		}
		word = board[3] + board[4] + board[5]; // right, from second row starting at the left
		if (word.equals("XXX") || word.equals("OOO")) {
			return word;
		}
		word = board[6] + board[7] + board[8]; // right, from third row starting at the left
		if (word.equals("XXX") || word.equals("OOO")) {
			return word;
		}
		word = board[0] + board[3] + board[6]; // down, from first row starting at the top
		if (word.equals("XXX") || word.equals("OOO")) {
			return word;
		}
		word = board[1] + board[4] + board[7]; // down, from second row starting at the top
		if (word.equals("XXX") || word.equals("OOO")) {
			return word;
		}
		word = board[2] + board[5] + board[8]; // down, from third row starting at the top
		if (word.equals("XXX") || word.equals("OOO")) {
			return word;
		}
		word = board[0] + board[4] + board[8]; // diagonal, down, and to the right, from first spot on the first row
		if (word.equals("XXX") || word.equals("OOO")) {
			return word;
		}
		word = board[2] + board[4] + board[6]; // diagonal, down, and to the left, from the last spot on the first row
		if (word.equals("XXX") || word.equals("OOO")) {
			return word;
		}
		return word;
	}

	private void listenButtonActionPerformed(java.awt.event.ActionEvent evt, String name) {// GEN-FIRST:event_listenButtonActionPerformed
		listener = new MessageListener(this, Integer.parseInt(receivePort.getText()), name);
		listener.start();
	}// GEN-LAST:event_listenButtonActionPerformed

	private void sendMessage(String mes) {
		if (!mes.trim().equals("")) {
			MessageTransmitter transmitter = new MessageTransmitter(mes, ipTextField.getText(),
					Integer.parseInt(targetPort.getText()));
			this.write(myName.getName() + ": " + message.getText());
			if (message.getText().equals("!Tic-Tac-Toe X")) {
				TTBoard = new TTBoard();
				board = new String[9];
				nextTurn();
				sButtons();
				XoO = "X";
			}
			if (message.getText().equals("!Tic-Tac-Toe O")) {
				TTBoard = new TTBoard();
				board = new String[9];
				nextTurn();
				sButtons();
				XoO = "O";
			}
			transmitter.start();
		}
	}

	public void send(String mes) {
		MessageTransmitter transmitter = new MessageTransmitter(mes, ipTextField.getText(),
				Integer.parseInt(targetPort.getText()));
		transmitter.start();
	}

	private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_sendButtonActionPerformed
		sendMessage(message.getText());
	}// GEN-LAST:event_sendButtonActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainScreen().setVisible(true);
			}
		});
	}

	public void sButtons() {
		TTBoard.B1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				TTBoard.sB1(XoO);
				send(XoO + "1");
				board[0] = XoO;
			}
		});

		TTBoard.B2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				TTBoard.sB2(XoO);
				send(XoO + "2");
				board[1] = XoO;
			}
		});

		TTBoard.B3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				TTBoard.sB3(XoO);
				send(XoO + "3");
				board[2] = XoO;
			}
		});

		TTBoard.B4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				TTBoard.sB4(XoO);
				send(XoO + "4");
				board[3] = XoO;
			}
		});

		TTBoard.B5.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				TTBoard.sB5(XoO);
				send(XoO + "5");
				board[4] = XoO;
			}
		});

		TTBoard.B6.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				TTBoard.sB6(XoO);
				send(XoO + "6");
				board[5] = XoO;
			}
		});

		TTBoard.B7.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				TTBoard.sB7(XoO);
				send(XoO + "7");
				board[6] = XoO;
			}
		});

		TTBoard.B8.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				TTBoard.sB8(XoO);
				send(XoO + "8");
				board[7] = XoO;
			}
		});

		TTBoard.B9.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				TTBoard.sB9(XoO);
				send(XoO + "9");
				board[8] = XoO;
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTextArea chat;
	private javax.swing.JTextField ipTextField;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JButton listenButton;
	private javax.swing.JTextField message;
	private javax.swing.JTextField receivePort;
	private javax.swing.JButton sendButton;
	private javax.swing.JTextField targetPort;
	private javax.swing.JMenuBar mb;
	private javax.swing.JMenu menu;
	private javax.swing.JMenuItem menuItem;
	private javax.swing.JMenu submenu;

	private ArrayList<Profile> directory;

	private PrintStream doc;

	private Profile myName;
	private Profile yourName;
	// private javax.swing.JButton swapButton;
	// End of variables declaration//GEN-END:variables
	private String chatLoggerString;

	@Override
	public void write(String s) {
		jScrollPane1.getVerticalScrollBar().setValue(jScrollPane1.getVerticalScrollBar().getMaximum());
		chat.append(s + System.lineSeparator());
		chatLoggerString += s + "\n";
	}
}